// Ram Erlikh Portfolio Website - Main JavaScript
// Generated by split_website.py

document.addEventListener('DOMContentLoaded', function() {
    // Fix theme switching to prevent bleeding between themes
document.addEventListener('DOMContentLoaded', function() {
    // Get the theme button and indicator
    const themeButton = document.getElementById('theme-button');
    const themeIndicator = document.getElementById('theme-indicator');
    
    if (themeButton) {
        // Replace the click handler to ensure proper theme switching
        themeButton.addEventListener('click', function() {
            // This will invoke the original theme switching behavior
            const event = new MouseEvent('click', {
                bubbles: true,
                cancelable: true,
                view: window
            });
            
            // Dispatch the event
            themeButton.dispatchEvent(event);
            
            // Additional cleanup to prevent theme bleeding
            setTimeout(function() {
                cleanupThemes();
            }, 50);
        }, true);
    }
    
    // Also fix the theme indicator if it exists
    if (themeIndicator) {
        themeIndicator.addEventListener('click', function() {
            setTimeout(function() {
                cleanupThemes();
            }, 50);
        }, true);
    }
    
    // Function to clean up theme bleeding
    function cleanupThemes() {
        // Get current theme
        const bodyClasses = document.body.classList;
        let currentTheme = null;
        
        for (let i = 0; i < bodyClasses.length; i++) {
            if (bodyClasses[i].startsWith('theme-')) {
                currentTheme = bodyClasses[i];
                break;
            }
        }
        
        // Hide all theme-specific decorations
        document.querySelectorAll('.theme-decoration, .tech-badges, .cyber-decor, .agency-shapes, .stars, .particles-container').forEach(el => {
            el.style.display = 'none';
        });
        
        // Only show decorations for current theme
        if (currentTheme === 'theme-modern-tech') {
            document.querySelectorAll('.tech-badges').forEach(el => {
                el.style.display = 'block';
            });
        } else if (currentTheme === 'theme-cyberpunk') {
            document.querySelectorAll('.cyber-decor').forEach(el => {
                el.style.display = 'block';
            });
        } else if (currentTheme === 'theme-agency') {
            document.querySelectorAll('.agency-shapes').forEach(el => {
                el.style.display = 'block';
            });
        }
        
        // Force all timeline elements to be visible and properly styled
        const timeline = document.querySelector('.timeline');
        if (timeline) {
            timeline.style.display = 'block';
            timeline.style.visibility = 'visible';
            timeline.style.opacity = '1';
        }
        
        document.querySelectorAll('.timeline-item, .timeline-content').forEach(el => {
            el.style.display = 'block';
            el.style.visibility = 'visible';
            el.style.opacity = '1';
        });
    }
    
    // Run cleanup on page load
    cleanupThemes();
});

// Wait until document is fully loaded and all scripts have executed
document.addEventListener('DOMContentLoaded', function() {
    console.log("⚡ Critical fixes loading");
    
    // ===== TERMINAL FIX =====
    // Get terminal elements
    const terminal = document.getElementById('matrix-terminal');
    const terminalToggle = document.getElementById('terminal-toggle');
    const terminalClose = document.getElementById('terminal-close');
    const terminalInput = document.getElementById('terminal-input');
    const terminalOutput = document.getElementById('terminal-output');
    
    console.log("Terminal elements:", Boolean(terminal), Boolean(terminalToggle), Boolean(terminalClose));
    
    // Create direct terminal toggle function - override any existing handlers
    if (terminalToggle) {
        terminalToggle.onclick = function(e) {
            console.log("Terminal toggle clicked");
            e.preventDefault();
            e.stopPropagation();
            if (terminal) {
                terminal.classList.add('open');
                console.log("Terminal opened");
                
                // Focus input after opening
                setTimeout(() => {
                    if (terminalInput) {
                        console.log("Focusing terminal input");
                        terminalInput.focus();
                        
                        // Show welcome message if needed
                        if (terminalOutput && terminalOutput.innerHTML.trim() === '') {
                            terminalOutput.innerHTML = `
                                <div class="success">==============================================</div>
                                <div class="info">Welcome to Matrix Terminal v1.0</div>
                                <div class="info">Type "help" to see available commands.</div>
                                <div class="info">Try commands like "about", "projects", "skills", "joke"</div>
                                <div class="success">==============================================</div>
                                <div></div>
                            `;
                        }
                    }
                }, 100);
            }
        };
    }
    
    // Create direct terminal close function
    if (terminalClose) {
        terminalClose.onclick = function(e) {
            console.log("Terminal close clicked");
            e.preventDefault();
            e.stopPropagation();
            if (terminal) {
                terminal.classList.remove('open');
                console.log("Terminal closed");
            }
        };
    }
    
    // Handle terminal input
    if (terminalInput && terminalOutput) {
        // Process input submission
        terminalInput.onkeydown = function(e) {
            if (e.key === 'Enter') {
                const input = this.value.trim();
                console.log("Terminal input submitted:", input);
                
                if (input) {
                    // Show command
                    const commandLine = document.createElement('div');
                    commandLine.textContent = '> ' + input;
                    terminalOutput.appendChild(commandLine);
                    
                    // Process command
                    processTerminalCommand(input, terminalOutput);
                    
                    // Clear input
                    this.value = '';
                    
                    // Scroll to bottom
                    terminalOutput.scrollTop = terminalOutput.scrollHeight;
                }
            }
        };
    }
    
    // Terminal command processor
    function processTerminalCommand(command, output) {
        const cmd = command.toLowerCase().split(' ')[0];
        const args = command.split(' ').slice(1);
        
        // Available commands
        const commands = {
            'help': function() {
                const helpLine = document.createElement('div');
                helpLine.className = 'info';
                helpLine.textContent = "Available commands:";
                output.appendChild(helpLine);
                
                const commandList = [
                    "help - Show this help message",
                    "about - Show information about Ram",
                    "clear - Clear the terminal",
                    "theme - Change website theme",
                    "projects - List projects",
                    "contact - Show contact information",
                    "skills - List skills and expertise",
                    "time - Show current time",
                    "date - Show current date",
                    "joke - Tell a developer joke",
                    "music - Toggle music playback",
                    "echo [text] - Echo text back",
                    "exit - Close the terminal"
                ];
                
                commandList.forEach(cmd => {
                    const cmdLine = document.createElement('div');
                    cmdLine.textContent = "  " + cmd;
                    output.appendChild(cmdLine);
                });
            },
            'clear': function() {
                output.innerHTML = '';
            },
            'about': function() {
                const aboutLine = document.createElement('div');
                aboutLine.className = 'info';
                aboutLine.textContent = "Ram Erlikh - Developer & Creative Technologist";
                output.appendChild(aboutLine);
                
                const aboutDesc = document.createElement('div');
                aboutDesc.textContent = "Currently building innovative web solutions and creative digital experiences.";
                output.appendChild(aboutDesc);
            },
            'echo': function() {
                const echoLine = document.createElement('div');
                echoLine.textContent = args.join(' ');
                output.appendChild(echoLine);
            },
            'exit': function() {
                if (terminal) {
                    terminal.classList.remove('open');
                }
            },
            'time': function() {
                const timeLine = document.createElement('div');
                timeLine.className = 'info';
                timeLine.textContent = "Current time: " + new Date().toLocaleTimeString();
                output.appendChild(timeLine);
            },
            'date': function() {
                const dateLine = document.createElement('div');
                dateLine.className = 'info';
                dateLine.textContent = "Current date: " + new Date().toLocaleDateString();
                output.appendChild(dateLine);
            },
            'theme': function() {
                const themeBtn = document.getElementById('theme-button');
                if (themeBtn) {
                    themeBtn.click();
                    const themeLine = document.createElement('div');
                    themeLine.className = 'success';
                    themeLine.textContent = "Theme changed!";
                    output.appendChild(themeLine);
                }
            },
            'joke': function() {
                const jokes = [
                    "Why do programmers prefer dark mode? Because light attracts bugs!",
                    "A programmer walks into a bar and orders 1.0000001 root beers. The bartender says, 'I'll have to round that up.'",
                    "How do you comfort a JavaScript bug? You console it!",
                    "Why do Java developers wear glasses? Because they can't C#!",
                    "What's a developer's favorite place in the house? The function room!",
                    "Why don't developers like nature? It has too many bugs!",
                    "A developer returned from shopping and their spouse asked, 'Did you get the bread?' They replied, 'They didn't have any, so I didn't get the milk either.'"
                ];
                
                const randomJoke = jokes[Math.floor(Math.random() * jokes.length)];
                const jokeLine = document.createElement('div');
                jokeLine.className = 'info';
                jokeLine.textContent = randomJoke;
                output.appendChild(jokeLine);
            },
            'music': function() {
                const playBtn = document.getElementById('audio-toggle');
                if (playBtn) {
                    playBtn.click();
                    const musicLine = document.createElement('div');
                    musicLine.className = 'success';
                    musicLine.textContent = "Music toggled!";
                    output.appendChild(musicLine);
                }
            },
            'projects': function() {
                const projectsLine = document.createElement('div');
                projectsLine.className = 'info';
                projectsLine.textContent = "Projects:";
                output.appendChild(projectsLine);
                
                const projects = [
                    "1. Belletty Arts - A creative platform for artistic projects",
                    "2. Fashion Store WebApp - A full-stack e-commerce web application",
                    "3. beTTer - Ultimate TT Dashboard Chrome extension with advanced productivity features",
                     "4. Location Overlay - Real-time GPS location and weather overlay for streaming platforms",
                    "4. GitHub Projects - Various open-source contributions"
                ];
                
                projects.forEach(project => {
                    const prjLine = document.createElement('div');
                    prjLine.textContent = "  " + project;
                    output.appendChild(prjLine);
                });
            },
            'skills': function() {
                const skillsLine = document.createElement('div');
                skillsLine.className = 'info';
                skillsLine.textContent = "Skills & Expertise:";
                output.appendChild(skillsLine);
                
                const skills = [
                    "→ Front-End: HTML5/CSS3, JavaScript, React",
                    "→ Back-End: Node.js, Python, API Development",
                    "→ Design: UI/UX, Creative Direction, Visual Communication"
                ];
                
                skills.forEach(skill => {
                    const skillLine = document.createElement('div');
                    skillLine.textContent = "  " + skill;
                    output.appendChild(skillLine);
                });
            },
            'contact': function() {
                const contactLine = document.createElement('div');
                contactLine.className = 'info';
                contactLine.textContent = "Contact Information:";
                output.appendChild(contactLine);
                
                const contacts = [
                    "Email: businessuniquryrn@gmail.com",
                    "LinkedIn: linkedin.com/in/ram-erlikh",
                    "GitHub: github.com/RamErlikh"
                ];
                
                contacts.forEach(contact => {
                    const contactLine = document.createElement('div');
                    contactLine.textContent = "  " + contact;
                    output.appendChild(contactLine);
                });
            }
        };
        
        // Execute command if it exists
        if (commands[cmd]) {
            commands[cmd]();
        } else {
            const errorLine = document.createElement('div');
            errorLine.className = 'error';
            errorLine.textContent = `Command not found: ${cmd}. Type "help" for available commands.`;
            output.appendChild(errorLine);
        }
    }
    
    // ===== AUDIO PLAYER FIX =====
    console.log("Fixing audio player");
    
    // Define our tracks
    const audioTracks = [
        { title: "Lofi Study", url: "https://cdn.pixabay.com/download/audio/2022/03/18/audio_1429951a95.mp3" },
        { title: "Chill Vibes", url: "https://cdn.pixabay.com/download/audio/2022/05/27/audio_1808fbf07a.mp3" },
        { title: "Meditation", url: "https://cdn.pixabay.com/download/audio/2022/11/22/audio_febc335bcc.mp3" },
        { title: "Focus Beat", url: "https://cdn.pixabay.com/download/audio/2021/11/25/audio_cb4f1212a9.mp3" },
        { title: "After Work", url: "https://cdn.pixabay.com/download/audio/2022/07/29/audio_18333f567c.mp3" }
    ];
    
    // Create a new audio element
    let audioElement = document.querySelector('#fixed-audio-element');
    if (!audioElement) {
        audioElement = new Audio();
        audioElement.id = 'fixed-audio-element';
        document.body.appendChild(audioElement);
    }
    
    let currentTrackIndex = 0;
    let isPlaying = false;
    
    // Store track index and playback state
    audioElement.dataset.trackIndex = currentTrackIndex;
    audioElement.dataset.isPlaying = isPlaying;
    
    // Get audio player elements
    const audioToggle = document.getElementById('audio-toggle');
    const audioNext = document.getElementById('audio-next');
    const audioVolume = document.getElementById('audio-volume');
    const audioTrackName = document.querySelector('.audio-track-name') || document.getElementById('audio-track-name');
    
    console.log("Audio elements:", Boolean(audioToggle), Boolean(audioNext), Boolean(audioVolume));
    
    // Function to play a track by index
    function playTrack(index) {
        console.log("Playing track:", index, audioTracks[index].title);
        
        // Set current track index
        currentTrackIndex = index;
        audioElement.dataset.trackIndex = index;
        
        // Update track source
        audioElement.src = audioTracks[index].url;
        
        // Set volume from slider if available
        if (audioVolume) {
            audioElement.volume = parseInt(audioVolume.value) / 100;
        } else {
            audioElement.volume = 0.5; // Default volume
        }
        
        // Play the track
        const playPromise = audioElement.play();
        
        if (playPromise !== undefined) {
            playPromise.then(_ => {
                // Update playing state
                isPlaying = true;
                audioElement.dataset.isPlaying = true;
                
                // Update UI
                updateAudioUI();
                
                console.log("Now playing:", audioTracks[index].title);
            }).catch(error => {
                console.error("Error playing track:", error);
                isPlaying = false;
                audioElement.dataset.isPlaying = false;
                updateAudioUI();
            });
        }
    }
    
    // Function to toggle play/pause
    function togglePlay() {
        if (isPlaying) {
            audioElement.pause();
            isPlaying = false;
            audioElement.dataset.isPlaying = false;
        } else {
            // If we have a track loaded
            if (audioElement.src) {
                audioElement.play().catch(e => console.error("Error resuming playback:", e));
                isPlaying = true;
                audioElement.dataset.isPlaying = true;
            } else {
                // Play first track if nothing is loaded
                playTrack(currentTrackIndex);
            }
        }
        
        // Update UI
        updateAudioUI();
    }
    
    // Function to play next track
    function playNextTrack() {
        // Get next track index (loop back to 0 if at the end)
        currentTrackIndex = (currentTrackIndex + 1) % audioTracks.length;
        
        // If currently playing, start the next track
        if (isPlaying) {
            playTrack(currentTrackIndex);
        } else {
            // Just update the index and UI
            audioElement.dataset.trackIndex = currentTrackIndex;
            updateAudioUI();
        }
    }
    
    // Function to update audio player UI
    function updateAudioUI() {
        // Update play/pause button
        if (audioToggle) {
            audioToggle.innerHTML = isPlaying ? 
                '<i class="fas fa-pause"></i>' : 
                '<i class="fas fa-play"></i>';
        }
        
        // Update track name display
        if (audioTrackName) {
            audioTrackName.textContent = audioTracks[currentTrackIndex].title;
        }
    }
    
    // Set up audio toggle button
    if (audioToggle) {
        // Add direct onclick handler that overrides any existing handlers
        audioToggle.onclick = function(e) {
            console.log("Audio toggle clicked");
            e.preventDefault();
            e.stopPropagation();
            togglePlay();
        };
    }
    
    // Set up next track button
    if (audioNext) {
        // Add direct onclick handler that overrides any existing handlers
        audioNext.onclick = function(e) {
            console.log("Next track clicked");
            e.preventDefault();
            e.stopPropagation();
            playNextTrack();
        };
    }
    
    // Set up volume control
    if (audioVolume) {
        // Add direct oninput handler that overrides any existing handlers
        audioVolume.oninput = function() {
            audioElement.volume = parseInt(this.value) / 100;
        };
        
        // Set initial volume
        audioElement.volume = parseInt(audioVolume.value) / 100;
    }
    
    // Handle track ending - play next track
    audioElement.onended = function() {
        console.log("Track ended, playing next");
        playNextTrack();
    };
    
    // Initialize the UI with first track info
    updateAudioUI();
    
    console.log("⚡ Critical fixes loaded successfully");
});

// Execute immediately to ensure our fixes run
(function() {
    // Check if DOMContentLoaded already fired
    if (document.readyState === 'loading') {
        console.log("Document still loading, waiting for DOMContentLoaded");
    } else {
        console.log("Document already loaded, running fixes immediately");
        const event = new Event('DOMContentLoaded');
        document.dispatchEvent(event);
    }
})();

// Initialize when document is fully loaded
document.addEventListener('DOMContentLoaded', function() {
    console.log("ðŸ”§ Loading critical fixes");
    
    // ===== 1. FIX MATRIX TERMINAL =====
    console.log("Fixing Matrix Terminal");
    const terminal = document.getElementById('matrix-terminal');
    const terminalToggle = document.getElementById('terminal-toggle');
    const terminalClose = document.getElementById('terminal-close');
    const terminalInput = document.getElementById('terminal-input');
    const terminalOutput = document.getElementById('terminal-output');
    
    if (terminal && terminalToggle && terminalClose && terminalInput && terminalOutput) {
        console.log("Found all terminal elements");
        
        // Create a new terminal toggle button
        const newToggle = document.createElement('button');
        newToggle.className = terminalToggle.className;
        newToggle.id = terminalToggle.id;
        newToggle.title = "Open Terminal";
        newToggle.innerHTML = terminalToggle.innerHTML;
        
        // Replace the original button
        if (terminalToggle.parentNode) {
            terminalToggle.parentNode.replaceChild(newToggle, terminalToggle);
            console.log("Replaced terminal toggle button");
        }
        
        // Add click handler to open terminal
        newToggle.addEventListener('click', function(e) {
            e.preventDefault();
            e.stopPropagation();
            console.log("Terminal toggle clicked");
            terminal.classList.add('open');
            
            setTimeout(() => {
                terminalInput.focus();
                
                // Show welcome message if empty
                if (terminalOutput.innerHTML.trim() === '') {
                    terminalOutput.innerHTML = `
                        <div class="success">==============================================</div>
                        <div class="info">Welcome to Matrix Terminal v1.0</div>
                        <div class="info">Type "help" to see available commands.</div>
                        <div class="info">Try commands like "about", "projects", "skills", "joke"</div>
                        <div class="success">==============================================</div>
                        <div></div>
                    `;
                }
                
                // Create Matrix rain effect if not already created
                createMatrixRain();
            }, 100);
        });
        
        // Create a new terminal close button
        const newClose = document.createElement('button');
        newClose.className = terminalClose.className;
        newClose.id = terminalClose.id;
        newClose.innerHTML = terminalClose.innerHTML;
        
        // Replace the original close button
        if (terminalClose.parentNode) {
            terminalClose.parentNode.replaceChild(newClose, terminalClose);
            console.log("Replaced terminal close button");
        }
        
        // Add click handler to close terminal
        newClose.addEventListener('click', function(e) {
            e.preventDefault();
            e.stopPropagation();
            console.log("Terminal close clicked");
            terminal.classList.remove('open');
        });
        
        // Handle terminal input
        const newInput = document.createElement('input');
        newInput.type = "text";
        newInput.className = terminalInput.className;
        newInput.id = terminalInput.id;
        newInput.placeholder = "Enter a command...";
        newInput.autocomplete = "off";
        
        // Replace the original input
        if (terminalInput.parentNode) {
            terminalInput.parentNode.replaceChild(newInput, terminalInput);
            console.log("Replaced terminal input");
        }
        
        // Add keydown handler for commands
        newInput.addEventListener('keydown', function(e) {
            if (e.key === 'Enter') {
                const cmd = this.value.trim();
                
                if (cmd) {
                    // Echo command
                    const cmdLine = document.createElement('div');
                    cmdLine.textContent = '> ' + cmd;
                    terminalOutput.appendChild(cmdLine);
                    
                    // Process command
                    processCommand(cmd);
                    
                    // Clear input
                    this.value = '';
                    
                    // Scroll to bottom
                    terminalOutput.scrollTop = terminalOutput.scrollHeight;
                }
            }
        });
        
        // Process terminal commands
        function processCommand(input) {
            const args = input.split(' ');
            const cmd = args.shift().toLowerCase();
            
            // Available commands
            const commands = {
                help: function() {
                    const helpLine = document.createElement('div');
                    helpLine.className = 'info';
                    helpLine.textContent = "Available commands:";
                    terminalOutput.appendChild(helpLine);
                    
                    const cmdList = [
                        "help - Show this help message",
                        "clear - Clear the terminal",
                        "about - Show information about Ram",
                        "projects - List projects",
                        "contact - Show contact information",
                        "skills - List skills and expertise",
                        "theme - Change website theme",
                        "joke - Tell a developer joke",
                        "time - Show current time",
                        "date - Show current date",
                        "echo [text] - Echo text back",
                        "matrix - Toggle matrix rain effect",
                        "music - Toggle music playback",
                        "exit - Close the terminal"
                    ];
                    
                    cmdList.forEach(item => {
                        const line = document.createElement('div');
                        line.textContent = "  " + item;
                        terminalOutput.appendChild(line);
                    });
                },
                clear: function() {
                    terminalOutput.innerHTML = '';
                },
                about: function() {
                    const aboutLine = document.createElement('div');
                    aboutLine.className = 'info';
                    aboutLine.textContent = "Ram Erlikh - Developer & Creative Technologist";
                    terminalOutput.appendChild(aboutLine);
                    
                    const descLine = document.createElement('div');
                    descLine.textContent = "Currently building innovative web solutions and creative digital experiences.";
                    terminalOutput.appendChild(descLine);
                },
                projects: function() {
                    const projectsLine = document.createElement('div');
                    projectsLine.className = 'info';
                    projectsLine.textContent = "Projects:";
                    terminalOutput.appendChild(projectsLine);
                    
                    const projects = [
                        "1. Belletty Arts - A creative platform for artistic projects",
                        "2. Fashion Store WebApp - A full-stack e-commerce web application",
                        "3. beTTer - Ultimate TT Dashboard Chrome extension with advanced productivity features",
                     "4. Location Overlay - Real-time GPS location and weather overlay for streaming platforms",
                        "4. GitHub Projects - Various open-source contributions"
                    ];
                    
                    projects.forEach(project => {
                        const line = document.createElement('div');
                        line.textContent = "  " + project;
                        terminalOutput.appendChild(line);
                    });
                },
                contact: function() {
                    const contactLine = document.createElement('div');
                    contactLine.className = 'info';
                    contactLine.textContent = "Contact Information:";
                    terminalOutput.appendChild(contactLine);
                    
                    const contacts = [
                        "Email: businessuniquryrn@gmail.com",
                        "LinkedIn: linkedin.com/in/ram-erlikh",
                        "GitHub: github.com/RamErlikh"
                    ];
                    
                    contacts.forEach(contact => {
                        const line = document.createElement('div');
                        line.textContent = "  " + contact;
                        terminalOutput.appendChild(line);
                    });
                },
                skills: function() {
                    const skillsLine = document.createElement('div');
                    skillsLine.className = 'info';
                    skillsLine.textContent = "Skills & Expertise:";
                    terminalOutput.appendChild(skillsLine);
                    
                    const skills = [
                        "â–º Front-End: HTML5/CSS3, JavaScript, React",
                        "â–º Back-End: Node.js, Python, API Development",
                        "â–º Design: UI/UX, Creative Direction, Visual Communication"
                    ];
                    
                    skills.forEach(skill => {
                        const line = document.createElement('div');
                        line.textContent = "  " + skill;
                        terminalOutput.appendChild(line);
                    });
                },
                theme: function() {
                    const themeBtn = document.getElementById('theme-button');
                    if (themeBtn) {
                        themeBtn.click();
                        const themeLine = document.createElement('div');
                        themeLine.className = 'success';
                        themeLine.textContent = "Theme changed successfully!";
                        terminalOutput.appendChild(themeLine);
                    } else {
                        const errorLine = document.createElement('div');
                        errorLine.className = 'error';
                        errorLine.textContent = "Error: Theme button not found";
                        terminalOutput.appendChild(errorLine);
                    }
                },
                joke: function() {
                    const jokes = [
                        "Why do programmers prefer dark mode? Because light attracts bugs!",
                        "A programmer walks into a bar and orders 1.0000001 root beers. The bartender says, 'I'll have to round that up.'",
                        "How do you comfort a JavaScript bug? You console it!",
                        "Why do Java developers wear glasses? Because they can't C#!",
                        "What's a developer's favorite place in the house? The function room!",
                        "Why don't developers like nature? It has too many bugs!",
                        "A developer returned from shopping and their spouse asked, 'Did you get the bread?' They replied, 'They didn't have any, so I didn't get the milk either.'"
                    ];
                    
                    const joke = jokes[Math.floor(Math.random() * jokes.length)];
                    const jokeLine = document.createElement('div');
                    jokeLine.className = 'info';
                    jokeLine.textContent = joke;
                    terminalOutput.appendChild(jokeLine);
                },
                time: function() {
                    const timeLine = document.createElement('div');
                    timeLine.className = 'info';
                    timeLine.textContent = "Current time: " + new Date().toLocaleTimeString();
                    terminalOutput.appendChild(timeLine);
                },
                date: function() {
                    const dateLine = document.createElement('div');
                    dateLine.className = 'info';
                    dateLine.textContent = "Current date: " + new Date().toLocaleDateString();
                    terminalOutput.appendChild(dateLine);
                },
                matrix: function() {
                    const matrixRain = terminal.querySelector('.matrix-rain');
                    if (matrixRain) {
                        matrixRain.remove();
                        const matrixLine = document.createElement('div');
                        matrixLine.className = 'success';
                        matrixLine.textContent = "Matrix rain effect disabled";
                        terminalOutput.appendChild(matrixLine);
                    } else {
                        createMatrixRain();
                        const matrixLine = document.createElement('div');
                        matrixLine.className = 'success';
                        matrixLine.textContent = "Matrix rain effect enabled";
                        terminalOutput.appendChild(matrixLine);
                    }
                },
                music: function() {
                    // Try to control music through our custom audio player
                    if (window.audioPlayerControlsV2) {
                        const wasPlaying = window.audioPlayerControlsV2.isPlaying;
                        window.audioPlayerControlsV2.togglePlay();
                        
                        const musicLine = document.createElement('div');
                        musicLine.className = 'success';
                        musicLine.textContent = wasPlaying ? "Music paused" : "Music playing";
                        terminalOutput.appendChild(musicLine);
                    } else {
                        // Fallback to clicking the button
                        const audioToggle = document.getElementById('audio-toggle');
                        if (audioToggle) {
                            audioToggle.click();
                            const musicLine = document.createElement('div');
                            musicLine.className = 'success';
                            musicLine.textContent = "Music toggled";
                            terminalOutput.appendChild(musicLine);
                        } else {
                            const errorLine = document.createElement('div');
                            errorLine.className = 'error';
                            errorLine.textContent = "Error: Audio player not found";
                            terminalOutput.appendChild(errorLine);
                        }
                    }
                },
                echo: function() {
                    const text = args.join(' ');
                    const echoLine = document.createElement('div');
                    echoLine.textContent = text;
                    terminalOutput.appendChild(echoLine);
                },
                exit: function() {
                    terminal.classList.remove('open');
                }
            };
            
            // Execute command if it exists
            if (commands[cmd]) {
                commands[cmd]();
            } else {
                const errorLine = document.createElement('div');
                errorLine.className = 'error';
                errorLine.textContent = `Command not found: ${cmd}. Type "help" for available commands.`;
                terminalOutput.appendChild(errorLine);
            }
        }
        
        // Create Matrix rain effect
        function createMatrixRain() {
            // Check if Matrix rain already exists
            if (terminal.querySelector('.matrix-rain')) {
                return;
            }
            
            const matrixRain = document.createElement('div');
            matrixRain.className = 'matrix-rain';
            terminal.appendChild(matrixRain);
            
            // Characters to use
            const chars = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789$+-*/=%"&#&_(),.;:?!\\|{}<>[]^~';
            
            // Create drops
            const columns = Math.floor(terminal.offsetWidth / 14);
            
            for (let i = 0; i < columns; i++) {
                const drop = document.createElement('div');
                drop.className = 'matrix-drop';
                drop.style.left = `${i * 14}px`;
                drop.style.animationDuration = `${Math.random() * 5 + 5}s`;
                drop.style.animationDelay = `${Math.random() * 5}s`;
                
                // Random characters
                const length = Math.floor(Math.random() * 10 + 5);
                for (let j = 0; j < length; j++) {
                    const char = chars.charAt(Math.floor(Math.random() * chars.length));
                    drop.innerHTML += char + '<br>';
                }
                
                matrixRain.appendChild(drop);
            }
        }
    } else {
        console.error("Could not find all terminal elements", {
            terminalExists: Boolean(terminal),
            toggleExists: Boolean(terminalToggle),
            closeExists: Boolean(terminalClose),
            inputExists: Boolean(terminalInput),
            outputExists: Boolean(terminalOutput)
        });
    }
    
    // ===== 2. FIX AUDIO PLAYER =====
    console.log("Fixing Audio Player");
    
    // Remove any existing audio elements to avoid conflicts
    const existingAudio = document.querySelectorAll('audio:not(#fixed-audio-player-v2)');
    existingAudio.forEach(audio => {
        console.log("Removing existing audio element:", audio.id || 'unnamed');
        audio.pause();
        audio.remove();
    });
    
    // Create our own audio element
    let audioElement = document.getElementById('fixed-audio-player-v2');
    if (!audioElement) {
        audioElement = document.createElement('audio');
        audioElement.id = 'fixed-audio-player-v2';
        document.body.appendChild(audioElement);
        console.log("Created new audio element");
    }
    
    // Define tracks (at least 5)
    const tracks = [
        { title: "Lofi Study", url: "https://cdn.pixabay.com/download/audio/2022/03/18/audio_1429951a95.mp3" },
        { title: "Chill Vibes", url: "https://cdn.pixabay.com/download/audio/2022/05/27/audio_1808fbf07a.mp3" },
        { title: "Meditation", url: "https://cdn.pixabay.com/download/audio/2022/11/22/audio_febc335bcc.mp3" },
        { title: "Focus Beat", url: "https://cdn.pixabay.com/download/audio/2021/11/25/audio_cb4f1212a9.mp3" },
        { title: "After Work", url: "https://cdn.pixabay.com/download/audio/2022/07/29/audio_18333f567c.mp3" }
    ];
    
    // Set up audio player state
    let currentTrackIndex = 0;
    let isPlaying = false;
    
    // Get audio player UI elements
    const audioToggle = document.getElementById('audio-toggle');
    const audioNext = document.getElementById('audio-next');
    const audioVolume = document.getElementById('audio-volume');
    const audioTrackName = document.querySelector('.audio-track-name') || document.getElementById('audio-track-name');
    
    // Function to play a specific track
    function playTrack(index) {
        console.log(`Playing track ${index}: ${tracks[index].title}`);
        currentTrackIndex = index;
        
        // Set audio source
        audioElement.src = tracks[index].url;
        
        // Set volume
        if (audioVolume) {
            audioElement.volume = parseInt(audioVolume.value) / 100;
        } else {
            audioElement.volume = 0.6; // Default volume
        }
        
        // Play the track with error handling
        const playPromise = audioElement.play();
        
        if (playPromise !== undefined) {
            playPromise
                .then(_ => {
                    console.log(`Now playing: ${tracks[index].title}`);
                    isPlaying = true;
                    updatePlayerUI();
                    
                    // Show notification if possible
                    if (typeof showConsoleMessage === 'function') {
                        showConsoleMessage(`Now playing: ${tracks[index].title} 🎵`);
                    }
                })
                .catch(err => {
                    console.error("Error playing audio:", err);
                    isPlaying = false;
                    updatePlayerUI();
                });
        }
    }
    
    // Function to toggle play/pause
    function togglePlay() {
        console.log("Toggle play/pause");
        
        if (isPlaying) {
            audioElement.pause();
            isPlaying = false;
        } else {
            if (!audioElement.src) {
                playTrack(currentTrackIndex);
            } else {
                const playPromise = audioElement.play();
                if (playPromise !== undefined) {
                    playPromise
                        .then(_ => {
                            isPlaying = true;
                        })
                        .catch(err => {
                            console.error("Error resuming playback:", err);
                            // Try to reload and play the current track
                            playTrack(currentTrackIndex);
                        });
                }
            }
        }
        
        updatePlayerUI();
    }
    
    // Function to play next track
    function playNextTrack() {
        console.log("Play next track");
        currentTrackIndex = (currentTrackIndex + 1) % tracks.length;
        
        if (isPlaying) {
            playTrack(currentTrackIndex);
        } else {
            // Just update UI without playing
            updatePlayerUI();
            
            // Show notification if possible
            if (typeof showConsoleMessage === 'function') {
                showConsoleMessage(`Track selected: ${tracks[currentTrackIndex].title}`);
            }
        }
    }
    
    // Function to update player UI
    function updatePlayerUI() {
        console.log("Updating player UI, playing:", isPlaying, "track:", currentTrackIndex);
        
        // Update toggle button
        if (audioToggle) {
            audioToggle.innerHTML = isPlaying ? 
                '<i class="fas fa-pause"></i>' : 
                '<i class="fas fa-play"></i>';
        }
        
        // Update track name
        if (audioTrackName) {
            audioTrackName.textContent = tracks[currentTrackIndex].title;
        }
    }
    
    // Setup audio toggle button - completely replace it
    if (audioToggle) {
        const newToggle = document.createElement('button');
        newToggle.className = audioToggle.className;
        newToggle.id = audioToggle.id;
        newToggle.title = "Play/Pause";
        newToggle.innerHTML = '<i class="fas fa-play"></i>';
        
        // Replace the original button
        if (audioToggle.parentNode) {
            audioToggle.parentNode.replaceChild(newToggle, audioToggle);
            console.log("Replaced audio toggle button");
        }
        
        // Add click handler
        newToggle.addEventListener('click', function(e) {
            e.preventDefault();
            e.stopPropagation();
            console.log("Audio toggle clicked");
            togglePlay();
        });
    }
    
    // Setup next track button - completely replace it
    if (audioNext) {
        const newNext = document.createElement('button');
        newNext.className = audioNext.className;
        newNext.id = audioNext.id;
        newNext.title = "Next Track";
        newNext.innerHTML = '<i class="fas fa-forward"></i>';
        
        // Replace the original button
        if (audioNext.parentNode) {
            audioNext.parentNode.replaceChild(newNext, audioNext);
            console.log("Replaced next track button");
        }
        
        // Add click handler
        newNext.addEventListener('click', function(e) {
            e.preventDefault();
            e.stopPropagation();
            console.log("Next track button clicked");
            playNextTrack();
        });
    }
    
    // Setup volume control - completely replace it
    if (audioVolume) {
        const newVolume = document.createElement('input');
        newVolume.type = "range";
        newVolume.min = "0";
        newVolume.max = "100";
        newVolume.value = "60";
        newVolume.className = audioVolume.className;
        newVolume.id = audioVolume.id;
        newVolume.title = "Volume";
        
        // Replace the original input
        if (audioVolume.parentNode) {
            audioVolume.parentNode.replaceChild(newVolume, audioVolume);
            console.log("Replaced volume control");
        }
        
        // Add input handler
        newVolume.addEventListener('input', function() {
            console.log("Volume changed:", this.value);
            audioElement.volume = parseInt(this.value) / 100;
        });
    }
    
    // Handle track ending
    audioElement.addEventListener('ended', function() {
        console.log("Track ended");
        playNextTrack();
    });
    
    // Expose audio controls to global scope for other scripts to use
    window.audioPlayerControlsV2 = {
        playTrack: playTrack,
        togglePlay: togglePlay,
        nextTrack: playNextTrack,
        isPlaying: isPlaying,
        currentTrack: () => tracks[currentTrackIndex]
    };
    
    // Initialize UI
    updatePlayerUI();
    
    console.log("Critical fixes complete ✓");
});

// Run fixes immediately if DOM is already loaded
if (document.readyState === 'loading') {
    console.log("Waiting for document to load");
} else {
    console.log("Document already loaded, running fixes immediately");
    document.dispatchEvent(new Event('DOMContentLoaded'));
}

// Wait for page to be fully loaded
window.addEventListener('load', function() {
    console.log("⚡ Installing standalone audio player");
    
    // Get player elements - without jQuery to avoid any conflicts
    const playerControls = {
        toggle: document.getElementById('audio-toggle'),
        next: document.getElementById('audio-next'),
        volume: document.getElementById('audio-volume'),
        trackName: document.querySelector('.audio-track-name') || document.getElementById('audio-track-name')
    };
    
    // Debug what controls we found
    console.log("Found audio controls:", 
        "toggle:", Boolean(playerControls.toggle),
        "next:", Boolean(playerControls.next),
        "volume:", Boolean(playerControls.volume),
        "trackName:", Boolean(playerControls.trackName));
    
    // Define our tracks - using direct, reliable URLs
    const tracks = [
        { title: "Lofi Study", url: "https://cdn.pixabay.com/download/audio/2022/03/18/audio_1429951a95.mp3" },
        { title: "Chill Vibes", url: "https://cdn.pixabay.com/download/audio/2022/05/27/audio_1808fbf07a.mp3" },
        { title: "Meditation", url: "https://cdn.pixabay.com/download/audio/2022/11/22/audio_febc335bcc.mp3" },
        { title: "Focus Beat", url: "https://cdn.pixabay.com/download/audio/2021/11/25/audio_cb4f1212a9.mp3" },
        { title: "After Work", url: "https://cdn.pixabay.com/download/audio/2022/07/29/audio_18333f567c.mp3" }
    ];

    // ===== STEP 1: Create a completely new audio element =====
    // Remove all existing audio elements to prevent conflicts
    document.querySelectorAll('audio').forEach(el => {
        console.log("Removing existing audio element:", el.id || 'unnamed');
        try {
            el.pause();
            el.src = '';
            el.load();
            el.remove();
        } catch(e) {
            console.error("Error removing audio element:", e);
        }
    });
    
    // Create our standalone audio element with a very specific ID
    const audio = document.createElement('audio');
    audio.id = 'standalone-audio-element-' + Date.now();
    document.body.appendChild(audio);
    console.log("Created new audio element with ID:", audio.id);
    
    // Set up audio state
    let currentTrackIndex = 0;
    let isPlaying = false;
    
    // ===== STEP 2: Create new control buttons to replace existing ones =====
    
    // Create new play/pause button
    const newToggle = document.createElement('button');
    if (playerControls.toggle) {
        // Copy all attributes and classes from the original button
        newToggle.className = playerControls.toggle.className;
        newToggle.id = playerControls.toggle.id;
        newToggle.title = "Play/Pause";
        newToggle.innerHTML = '<i class="fas fa-play"></i>';
        
        // Replace the original button
        console.log("Replacing toggle button");
        playerControls.toggle.parentNode.replaceChild(newToggle, playerControls.toggle);
    }
    
    // Create new next track button
    const newNext = document.createElement('button');
    if (playerControls.next) {
        // Copy all attributes and classes from the original button
        newNext.className = playerControls.next.className;
        newNext.id = playerControls.next.id;
        newNext.title = "Next Track";
        newNext.innerHTML = '<i class="fas fa-forward"></i>';
        
        // Replace the original button
        console.log("Replacing next button");
        playerControls.next.parentNode.replaceChild(newNext, playerControls.next);
    }
    
    // Create new volume slider
    const newVolume = document.createElement('input');
    if (playerControls.volume) {
        // Copy all attributes and classes from the original slider
        newVolume.className = playerControls.volume.className;
        newVolume.id = playerControls.volume.id;
        newVolume.type = "range";
        newVolume.min = "0";
        newVolume.max = "100";
        newVolume.value = "60";
        newVolume.title = "Volume";
        
        // Replace the original slider
        console.log("Replacing volume slider");
        playerControls.volume.parentNode.replaceChild(newVolume, playerControls.volume);
    }
    
    // ===== STEP 3: Define player functions =====
    
    // Function to play a specific track with explicit debugging
    function playTrack(index) {
        // Reset audio element
        audio.pause();
        audio.src = '';
        
        // Update track index
        currentTrackIndex = index;
        console.log(`Playing track ${index}: ${tracks[index].title}`);
        
        // Set new track source
        const trackUrl = tracks[index].url;
        audio.src = trackUrl;
        console.log("Set audio source to:", trackUrl);
        
        // Set volume
        audio.volume = newVolume ? (parseInt(newVolume.value) / 100) : 0.6;
        console.log("Set volume to:", audio.volume);
        
        // Load and play (with explicit error handling)
        audio.load();
        setTimeout(() => {
            const playPromise = audio.play();
            if (playPromise !== undefined) {
                playPromise.then(() => {
                    isPlaying = true;
                    console.log("Playback started successfully");
                    updateUI();
                    
                    // Show notification if function exists
                    if (typeof showConsoleMessage === 'function') {
                        showConsoleMessage(`Now playing: ${tracks[index].title} 🎵`);
                    }
                }).catch(error => {
                    console.error("Error playing audio:", error);
                    isPlaying = false;
                    updateUI();
                });
            }
        }, 50);
    }
    
    // Function to toggle play/pause
    function togglePlay() {
        console.log("Toggle play called. Currently playing:", isPlaying);
        
        if (isPlaying) {
            audio.pause();
            isPlaying = false;
            console.log("Paused playback");
        } else {
            if (!audio.src || audio.src === window.location.href) {
                // No source set, load first track
                console.log("No source set, loading first track");
                playTrack(currentTrackIndex);
            } else {
                // Resume current track
                console.log("Resuming playback of current track");
                const playPromise = audio.play();
                if (playPromise !== undefined) {
                    playPromise.then(() => {
                        isPlaying = true;
                        console.log("Playback resumed successfully");
                    }).catch(error => {
                        console.error("Error resuming playback:", error);
                        // Try to reload the track
                        playTrack(currentTrackIndex);
                    });
                }
            }
        }
        
        updateUI();
    }
    
    // Function to play next track
    function playNextTrack() {
        console.log("Next track called. Current index:", currentTrackIndex);
        
        // Calculate next track index (loop back to 0 if at end)
        const nextIndex = (currentTrackIndex + 1) % tracks.length;
        console.log("Next track index:", nextIndex);
        
        if (isPlaying) {
            // If playing, start the next track immediately
            playTrack(nextIndex);
        } else {
            // Just update the index and UI
            currentTrackIndex = nextIndex;
            updateUI();
            console.log("Track changed but not playing");
            
            // Show notification if function exists
            if (typeof showConsoleMessage === 'function') {
                showConsoleMessage(`Track selected: ${tracks[nextIndex].title}`);
            }
        }
    }
    
    // Update UI to reflect current state
    function updateUI() {
        console.log("Updating UI. Playing:", isPlaying, "Track:", currentTrackIndex);
        
        // Update play/pause button
        if (newToggle) {
            newToggle.innerHTML = isPlaying ? 
                '<i class="fas fa-pause"></i>' : 
                '<i class="fas fa-play"></i>';
            console.log("Updated toggle button icon");
        }
        
        // Update track name display
        if (playerControls.trackName) {
            playerControls.trackName.textContent = tracks[currentTrackIndex].title;
            console.log("Updated track name to:", tracks[currentTrackIndex].title);
        }
    }
    
    // ===== STEP 4: Set up event listeners =====
    
    // Play/pause button
    if (newToggle) {
        newToggle.addEventListener('click', function(e) {
            e.preventDefault();
            e.stopPropagation();
            console.log("Toggle button clicked");
            togglePlay();
        });
    }
    
    // Next track button
    if (newNext) {
        newNext.addEventListener('click', function(e) {
            e.preventDefault();
            e.stopPropagation();
            console.log("Next button clicked");
            playNextTrack();
        });
    }
    
    // Volume control
    if (newVolume) {
        newVolume.addEventListener('input', function() {
            const volume = parseInt(this.value) / 100;
            console.log("Volume changed to:", volume);
            audio.volume = volume;
        });
    }
    
    // Handle track ending
    audio.addEventListener('ended', function() {
        console.log("Track ended automatically");
        playNextTrack();
    });
    
    // ===== STEP 5: Make player accessible to other scripts =====
    
    // Expose audio controls globally so they can be accessed by terminal commands
    window.standaloneAudioPlayer = {
        play: togglePlay,
        next: playNextTrack,
        getTrack: () => tracks[currentTrackIndex],
        isPlaying: () => isPlaying
    };
    
    // Initialize the player
    console.log("Initializing player with track:", tracks[currentTrackIndex].title);
    updateUI();
    
    // Auto-start if needed
    // Uncomment this line to auto-play the first track
    // setTimeout(togglePlay, 1000);
    
    console.log("⚡ Standalone audio player installed successfully");
});

if (!window.__musicPlayerInjected) {
  window.__musicPlayerInjected = true;
  window.addEventListener('load', function(){
    setTimeout(function(){
      // Remove any existing audio elements.
      document.querySelectorAll('audio').forEach(function(a){
        a.pause();
        a.remove();
      });
      
      // Define the 5 SoundHelix tracks.
      var tracks = [
        { title: 'SoundHelix Song 1', url: 'https://www.soundhelix.com/examples/mp3/SoundHelix-Song-1.mp3' },
        { title: 'SoundHelix Song 2', url: 'https://www.soundhelix.com/examples/mp3/SoundHelix-Song-2.mp3' },
        { title: 'SoundHelix Song 3', url: 'https://www.soundhelix.com/examples/mp3/SoundHelix-Song-3.mp3' },
        { title: 'SoundHelix Song 4', url: 'https://www.soundhelix.com/examples/mp3/SoundHelix-Song-4.mp3' },
        { title: 'SoundHelix Song 5', url: 'https://www.soundhelix.com/examples/mp3/SoundHelix-Song-5.mp3' }
      ];
      var currentTrackIndex = 0;
      
      // Create a new hidden audio element.
      var audio = document.createElement('audio');
      audio.id = "myAudio";
      audio.src = tracks[currentTrackIndex].url;
      audio.preload = "auto";
      audio.style.display = "none";
      document.body.appendChild(audio);
      
      // Function to update the toggle button icon.
      function updateToggleIcon() {
        var btn = document.getElementById("audio-toggle");
        if (btn) {
          btn.innerHTML = audio.paused ? '<i class="fas fa-play"></i>' : '<i class="fas fa-pause"></i>';
        }
      }
      audio.addEventListener("play", updateToggleIcon);
      audio.addEventListener("pause", updateToggleIcon);
      
      // When a track ends, auto-cycle to the next track.
      audio.addEventListener("ended", function(){
        currentTrackIndex = (currentTrackIndex + 1) % tracks.length;
        audio.src = tracks[currentTrackIndex].url;
        audio.load();
        audio.play().catch(function(err){
          console.error("Error playing next track:", err);
        });
      });
      
      // Bind the toggle button.
      var toggleButton = document.getElementById("audio-toggle");
      if (!toggleButton) {
        console.error("Audio toggle button with id 'audio-toggle' not found.");
        return;
      }
      // Clone to remove any pre-bound listeners.
      var newToggle = toggleButton.cloneNode(true);
      toggleButton.parentNode.replaceChild(newToggle, toggleButton);
      toggleButton = newToggle;
      
      // Toggle play/pause without resetting the current time.
      toggleButton.addEventListener("click", function(e){
        e.preventDefault();
        if (audio.paused) {
          audio.play().catch(function(err){ console.error("Error playing audio:", err); });
        } else {
          audio.pause();
        }
      }, true);
      
      // Bind the skip button.
      var skipButton = document.getElementById("audio-next");
      if (skipButton) {
        var newSkip = skipButton.cloneNode(true);
        skipButton.parentNode.replaceChild(newSkip, skipButton);
        skipButton = newSkip;
        skipButton.addEventListener("click", function(e){
          e.preventDefault();
          // Advance to next track.
          currentTrackIndex = (currentTrackIndex + 1) % tracks.length;
          audio.src = tracks[currentTrackIndex].url;
          audio.load();
          audio.play().catch(function(err){
            console.error("Error playing next track:", err);
          });
        }, true);
      } else {
        console.warn("Skip button with id 'audio-next' not found.");
      }
      
      console.log("Music player fix injected.");
    }, 1000);
  });
}
});